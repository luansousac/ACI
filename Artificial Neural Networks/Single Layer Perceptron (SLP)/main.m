%% Setting useful MATLAB Configurations

clc;
close all;
clearvars;
format LONG;

%% Adding important paths into the workspace

addpath('../../Utils/');

% Here you can add the desired dataset. Just be sure to point to the correct
% directory. Example: ../../Datasets/your_directory/
addpath('../../Datasets/iris_flower_data/');

%% Diplaying some info about the script

fprintf('+----------------------------------------------------------------+\n');
fprintf('|               INTELIGÊNCIA COMPUTACIONAL APLICADA              |\n');
fprintf('|                   REDE PERCEPTRON DE 1 CAMADA                  |\n');
fprintf('|                 Prof.: Dr. Ajalmar R. Rocha Neto               |\n');
fprintf('|                  Acadêmico: Luan Sousa Cordeiro                |\n');
fprintf('|                              IFCE                              |\n');
fprintf('+----------------------------------------------------------------+\n');

disp(' ');
disp(' ');
disp('Press any key to continue...');
pause

%% Importing the data set into the workspace

disp('Choose the dataset from the options below.');
opt = input(['(1) Banknote Annotations, (2) Iris Flower, ' ...
             '(3) Vertebral Column, (4) Artificial Dataset: ']);

switch opt
    case 1
        data = readfile('bank.dat', 5);
    case 2
        [data, classes] = readfile('iris.dat', 4);
        data = label_classes(data, classes, '2C');
    case 3
        [data, classes] = readfile('column_3C.dat', 6);
        data = label_classes(data, classes, '2C');
    case 4
        N = 100;
        v = 0.1;
        M = [0.3 0.3; 0.5 0.8];

        D1 = repmat(M(1,:), N, 1) + v*randn(N,2);
        D2 = repmat(M(2,:), N, 1) + v*randn(N,2);
        data = [D1 ones(N, 1); D2 zeros(N, 1)];
    otherwise
        error('Invalid option!');
end

%% Normalizing data in values between [0,1]

norm_data = normalize(data);

%% Setting important variables

% Iteration control
n_iter = 10;
l_rate = 0.05;
scores = zeros(n_iter, 1);

% Training settings
n_epochs = 10;

%% Training/Testing/Results iteration

for i = 1 : n_iter
%% Training the network

    % Randomize data in order to have different results
    [X_training, Y_training, X_test, Y_test] = shuffle_data(norm_data);

    % Initiating random weights for the perceptron neuron
    W = init_weights(norm_data);

    % Training network until ends the number of epochs
    W = train(X_training, Y_training, W, l_rate, n_epochs);

%% Testing the model generated by the network

    score = test(X_test, Y_test, W);
    perc = (score * 100) / size(X_test, 1);
	scores(i) = perc;

    % Displaying the accuracy for each iteration
    fprintf('The network classified %.2f%% of the test set correctly.\n', perc);

%% Ploting results for the report

    % x = 1 : n_iter;
    %
    % plot(x, scores, 'b')
    % hold on
    % xlabel('Value of k')
    % ylabel('Mean Accuracy')
    %
    % Create the data for the standard deviations and datasets
    % stds = [0.000 1.207 7.070];
    % dataset = {'Banknote Authentication', 'Iris Flower', 'Vertebral Column'};
    %
    % Plot the standard deviations on a horizontal bar chart
    % figure
    % bar(stds)
    %
    % Change the Y axis tick labels to use the datasets
    % set(gca, 'XTick', 1:3)
    % set(gca, 'XTickLabel', dataset)

    if opt == 4
        C1 = [];
        C2 = [];
        k = 1;
        j = 1;

        for x1 = 0:0.003:1
            for x2 = 0:0.003:1
                u = W * [-1; x1; x2];
                p = [x1 x2];

                % Storing for plot purposes
                if u >= 0 
                    C1(k,:) = p;
                    k = k + 1;
                elseif u < 0
                    C2(j,:) = p;
                    j = j + 1;
                end
            end
        end

        figure
        hold on
        axis([0 1 0 1])
        plot(C1(:,1), C1(:,2), '.', 'Color', [0.80 0.80 0.80], 'LineStyle', '-', ...
                                    'LineWidth', 3.0, 'HandleVisibility', 'off')
        plot(C2(:,1), C2(:,2), '.', 'Color', [0.80 0.88 0.97], 'LineStyle', '-', ...
                                    'LineWidth', 3.0, 'HandleVisibility', 'off')

        plot(D1(:,1), D1(:,2), '*', 'Color', [0.31 0.31 0.31], 'DisplayName', ...
                                                               'Classe 1');
        plot(D2(:,1), D2(:,2), '*', 'Color', [0.00 0.45 0.74], 'DisplayName', ...
                                                               'Classe 2');

        legend show
    end
end

%% Displaying summarized results

fprintf('\nSummarizing, the single layer perceptron was test with...\n');
fprintf('\tMean accuracy: %.2f\n', mean(scores));
fprintf('\tMinimum accuracy: %.2f\n', min(scores));
fprintf('\tMaximum accuracy: %.2f\n', max(scores));
fprintf('\tStandard Deviation: %.2f\n\n', std(scores));

%% (un)Setting MATLAB Configurations

format;
